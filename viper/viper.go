package viper

import (
	"fmt"
	"github.com/spf13/viper"
	"log"
)

// AutoGenerated 配置结构体
type AutoGenerated struct {
	Nacos Nacos `yaml:"nacos"`
}

// Nacos Nacos配置结构体
type Nacos struct {
	DataID    string `yaml:"DataID"`
	Group     string `yaml:"Group"`
	Addr      string `yaml:"addr"`
	NameSpace string `yaml:"nameSpace"`
	Password  string `yaml:"password"`
	Port      uint64 `yaml:"port"`
	Username  string `yaml:"username"`
}

// GlobalConfig 全局配置实例
var GlobalConfig AutoGenerated

// Viper 加载配置文件
// configPath: 配置文件路径
func Viper(configPath string) error {
	if configPath == "" {
		configPath = "./config.yaml"
		log.Printf("[Config] 未指定配置文件路径，使用默认路径：%s", configPath)
	}

	viper.SetConfigFile(configPath)
	viper.AutomaticEnv()

	// 读取配置文件
	if err := viper.ReadInConfig(); err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 解析配置文件到结构体
	if err := viper.Unmarshal(&GlobalConfig); err != nil {
		return fmt.Errorf("解析配置文件失败: %w", err)
	}

	log.Printf("[Config] 配置文件加载成功：%s", configPath)
	return nil
}

// GetNacos 获取 Nacos 配置
func GetNacos() Nacos {
	return GlobalConfig.Nacos
}
